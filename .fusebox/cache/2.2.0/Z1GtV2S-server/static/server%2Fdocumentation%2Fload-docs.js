module.exports = { contents: "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"lodash\");\nvar Github = require(\"github\");\nvar request = require(\"request-promise-native\");\nvar parse_md_1 = require(\"parse-md\");\nvar types_to_json_1 = require(\"./types-to-json\");\nvar gh = new Github();\ngh.authenticate({ type: 'token', token: process.env.TOKEN });\nfunction chapterOrder(arr, level) {\n    var place = arr;\n    for (var i = level - 1; i >= 0; i--) {\n        place = place[place.length - 1].chapters;\n    }\n    return place;\n}\nvar articleChapters = function (text) {\n    var match;\n    var result = [];\n    var rx = /(##+)\\s*(.+)/g;\n    while ((match = rx.exec(text)) !== null) {\n        var title = match[2];\n        var id = _.kebabCase(title.toLowerCase());\n        var level = match[1].length - 2;\n        var place = level === 0 ? result : chapterOrder(result, level);\n        place.push({ id: id, title: title, chapters: [] });\n    }\n    return result;\n};\nvar articleMetadata = function (article) {\n    var _a = parse_md_1.default(article), content = _a.content, _b = _a.metadata, id = _b.id, prev = _b.prev, category = _b.category;\n    var chapters = articleChapters(content);\n    return { content: content, id: id, title: _.startCase(id), prev: prev, category: category, chapters: chapters };\n};\nvar prepareMarkdown = function (content) {\n    return types_to_json_1.default(content).replace(/<!--(\\/?.*?)-->/g, '<$1>').trim();\n};\nvar parsedArticle = function (path) {\n    return request.get(path).then(prepareMarkdown).then(articleMetadata);\n};\nvar articlesDownloadLinks = function (path) {\n    return gh.repos.getContent({ repo: 'xene', owner: 'dempfi', ref: 'docs', path: path })\n        .then(function (response) { return response.data.map(function (i) { return i.download_url; }); });\n};\nvar sortArticles = function (docs) {\n    var head = docs.find(function (i) { return !i.prev; });\n    var current = head.id;\n    var sorted = [head];\n    var tmp = _.without(docs, head).reduce(function (tmp, i) { return tmp.set(i.prev, i); }, new Map());\n    while (sorted.length < docs.length) {\n        var next = tmp.get(current);\n        sorted.push(next);\n        current = next.id;\n    }\n    return sorted;\n};\nvar sortedArticles = function (module) {\n    return articlesDownloadLinks(module).then(function (i) { return Promise.all(i.map(parsedArticle)); }).then(sortArticles);\n};\nvar moduleDocs = function (_a) {\n    var name = _a.name, path = _a.path;\n    return sortedArticles(path).then(function (articles) { return ({ module: name, articles: articles }); });\n};\nexports.default = function () { return Promise.all([\n    { name: 'quick-start', path: '/docs' },\n    { name: 'core', path: '/packages/core/docs' },\n    { name: 'slack', path: '/packages/slack/docs' }\n].map(moduleDocs)); };\n",
dependencies: ["lodash","github","request-promise-native","parse-md","./types-to-json","process"],
sourceMap: {},
headerContent: ["/* fuse:injection: */ var process = require(\"process\");"],
mtime: 1498993113000,
devLibsRequired : undefined
};