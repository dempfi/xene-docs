FuseBox.pkg("react-lowlight", {}, function(___scope___){
___scope___.file("src/Lowlight.js", function(exports, require, module, __filename, __dirname){
/* fuse:injection: */ var process = require("process");
'use strict'

var React = require('react')
var PropTypes = require('prop-types')
var low = require('lowlight/lib/core')
var mapChildren = require('./mapChildren')
var addMarkers = require('./addMarkers')
var h = React.createElement

var registeredLanguages = 0

function Lowlight (props) {
  if (process.env.NODE_ENV !== 'production') {
    if (!props.language && registeredLanguages === 0) {
      console.warn(
        'No language definitions seems to be registered, ' +
        'did you forget to call `Lowlight.registerLanguage`?'
      )
    }
  }

  var result = props.language
    ? low.highlight(props.language, props.value, {prefix: props.prefix})
    : low.highlightAuto(props.value, {prefix: props.prefix, subset: props.subset})

  var codeProps = result.language
    ? {className: 'hljs ' + result.language}
    : {className: 'hljs'}

  if (props.inline) {
    codeProps.style = {display: 'inline'}
  }

  var ast = result.value
  if (props.markers && props.markers.length > 0) {
    ast = addMarkers(ast, {prefix: props.prefix, markers: props.markers})
  }

  var value = ast.length === 0
    ? props.value
    : ast.map(mapChildren.depth(0))

  var code = h('code', codeProps, value)
  return props.inline ? code : h('pre', {className: props.className}, code)
}

Lowlight.propTypes = {
  className: PropTypes.string,
  inline: PropTypes.bool,
  language: PropTypes.string,
  prefix: PropTypes.string,
  subset: PropTypes.arrayOf(PropTypes.string),
  value: PropTypes.string.isRequired,
  markers: PropTypes.arrayOf(
    PropTypes.oneOfType([
      PropTypes.number,
      PropTypes.shape({
        line: PropTypes.number.isRequired,
        className: PropTypes.string
      })
    ])
  )
}

Lowlight.defaultProps = {
  className: 'lowlight',
  inline: false,
  prefix: 'hljs-'
}

Lowlight.registerLanguage = function () {
  registeredLanguages++
  low.registerLanguage.apply(low, arguments)
}

Lowlight.hasLanguage = function (lang) {
  return !!low.getLanguage(lang)
}

module.exports = Lowlight

});
___scope___.file("src/mapChildren.js", function(exports, require, module, __filename, __dirname){

'use strict'

var React = require('react')

function mapChild (child, i, depth) {
  if (child.tagName) {
    return React.createElement(
      child.tagName,
      assign({key: 'lo-' + depth + '-' + i}, child.properties),
      child.children && child.children.map(mapWithDepth(depth + 1))
    )
  }

  return child.value
}

function mapWithDepth (depth) {
  return function mapChildrenWithDepth (child, i) {
    return mapChild(child, i, depth)
  }
}

function assign (dst, src) {
  for (var key in src) {
    dst[key] = src[key]
  }

  return dst
}

exports.depth = mapWithDepth

});
___scope___.file("src/addMarkers.js", function(exports, require, module, __filename, __dirname){

'use strict'

var lineNumberify = function lineNumberify (ast) {
  var lineNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1

  return ast.reduce(function (result, node) {
    if (node.type === 'text') {
      if (node.value.indexOf('\n') === -1) {
        node.lineNumber = lineNumber
        result.nodes.push(node)
        return result
      }

      var lines = node.value.split('\n')
      for (var i = 0; i < lines.length; i++) {
        result.nodes.push({
          type: 'text',
          value: i === lines.length - 1 ? lines[i] : lines[i] + '\n',
          lineNumber: i === 0 ? lineNumber : ++lineNumber
        })
      }

      result.lineNumber = lineNumber
      return result
    }

    if (node.children) {
      node.lineNumber = lineNumber
      var processed = lineNumberify(node.children, lineNumber)
      node.children = processed.nodes
      result.lineNumber = processed.lineNumber
      result.nodes.push(node)
      return result
    }

    result.nodes.push(node)
    return result
  }, {nodes: [], lineNumber: lineNumber})
}

var wrapLines = function wrapLines (ast, markers, options) {
  var i = 0
  var wrapped = markers.reduce(function (nodes, marker) {
    var line = marker.line
    var children = []
    for (; i < ast.length; i++) {
      if (ast[i].lineNumber < line) {
        nodes.push(ast[i])
        continue
      }

      if (ast[i].lineNumber === line) {
        children.push(ast[i])
        continue
      }

      if (ast[i].lineNumber > line) {
        break
      }
    }

    nodes.push({
      type: 'element',
      tagName: 'div',
      properties: {className: [marker.className || (options.prefix + 'marker')]},
      children: children,
      lineNumber: line
    })

    return nodes
  }, [])

  for (; i < ast.length; i++) {
    wrapped.push(ast[i])
  }

  return wrapped
}

module.exports = function (ast, options) {
  var markers = options.markers.map(function (marker) {
    return marker.line ? marker : {line: marker}
  }).sort(function (nodeA, nodeB) {
    return nodeA.line - nodeB.line
  })

  var numbered = lineNumberify(ast).nodes
  var wrapped = wrapLines(numbered, markers, options)
  return wrapped
}

});
return ___scope___.entry = "src/Lowlight.js";
});