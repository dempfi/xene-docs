module.exports = { contents: "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction default_1(hljs) {\n    var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n    var TYPE_IDENT_RE = IDENT_RE + '(\\\\s*<\\\\s*' + IDENT_RE + '\\\\s*>\\\\s*)?';\n    var TITLE_RE = /\\b[A-Z][0-9A-Za-z$_]*\\b/;\n    var KEYWORDS = {\n        keyword: 'in of if for while finally var new function do return void else break catch ' +\n            'instanceof with throw case default try this switch continue typeof delete ' +\n            'let yield const export super debugger as async await static abstract get set ' +\n            // ECMAScript 6 modules import\n            'import from as public private protected implements enum',\n        literal: 'true false null undefined NaN Infinity',\n        built_in: 'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +\n            'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +\n            'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +\n            'TypeError URIError Number Math Date String RegExp Array Float32Array ' +\n            'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +\n            'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +\n            'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +\n            'Promise any string number boolean'\n    };\n    var TITLE = {\n        className: 'minor-title',\n        begin: TITLE_RE,\n        relevance: 0\n    };\n    var NUMBER = {\n        className: 'number',\n        variants: [\n            { begin: '\\\\b(0[bB][01]+)' },\n            { begin: '\\\\b(0[oO][0-7]+)' },\n            { begin: hljs.C_NUMBER_RE }\n        ],\n        relevance: 0\n    };\n    var SUBST = {\n        className: 'subst',\n        begin: '\\\\$\\\\{', end: '\\\\}',\n        keywords: KEYWORDS,\n        contains: [] // defined later\n    };\n    var TEMPLATE_STRING = {\n        className: 'string',\n        begin: '`', end: '`',\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    SUBST.contains = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        TEMPLATE_STRING,\n        NUMBER,\n        hljs.REGEXP_MODE\n    ];\n    var PARAMS_CONTAINS = SUBST.contains.concat([\n        hljs.C_BLOCK_COMMENT_MODE,\n        hljs.C_LINE_COMMENT_MODE,\n        TITLE\n    ]);\n    return {\n        aliases: ['ts', 'tsx'],\n        keywords: KEYWORDS,\n        contains: [\n            {\n                className: 'regular',\n                begin: /[():]/\n            },\n            {\n                className: 'operator',\n                begin: /(\\+|-|=>|=<|>=|=)/,\n                relevance: 10\n            },\n            {\n                className: 'meta',\n                relevance: 10,\n                begin: /^\\s*['\"]use (strict|asm)['\"]/\n            },\n            {\n                className: 'meta',\n                begin: /^#!/, end: /$/\n            },\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            TEMPLATE_STRING,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            NUMBER,\n            {\n                begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n                keywords: 'return throw case',\n                contains: [\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    hljs.REGEXP_MODE\n                ],\n                relevance: 0\n            },\n            {\n                begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            },\n            hljs.METHOD_GUARD,\n            {\n                className: 'class',\n                beginKeywords: 'class', end: /[{=]/, excludeEnd: true,\n                illegal: /[:\"\\[\\]]/,\n                contains: [\n                    { beginKeywords: 'extends' },\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            {\n                beginKeywords: 'constructor', end: /\\{/, excludeEnd: true\n            },\n            {\n                beginKeywords: 'for switch while', skip: true\n            },\n            {\n                className: 'function',\n                begin: TYPE_IDENT_RE + '\\\\s*\\\\(', end: /\\)\\s*({|=>)/,\n                returnBegin: true,\n                excludeEnd: true,\n                relevance: 0,\n                keywords: KEYWORDS,\n                contains: [\n                    TITLE,\n                    {\n                        begin: hljs.IDENT_RE + '\\\\s*(<|\\\\()', returnBegin: true,\n                        contains: [hljs.TITLE_MODE],\n                        relevance: 0\n                    },\n                    {\n                        className: 'params',\n                        begin: /\\(/, end: /\\)/,\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        endsParent: true,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: PARAMS_CONTAINS\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            hljs.REGEXP_MODE,\n            TITLE\n        ],\n        illegal: /#(?!!)/\n    };\n}\nexports.default = default_1;\n",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1498383688000,
devLibsRequired : undefined
};